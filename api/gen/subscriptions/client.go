// Code generated by goa v3.5.4, DO NOT EDIT.
//
// Subscriptions client
//
// Command:
// $ goa gen github.com/lawrencejones/pgsink/api/design -o api

package subscriptions

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "Subscriptions" service client.
type Client struct {
	GetEndpoint       goa.Endpoint
	AddTableEndpoint  goa.Endpoint
	StopTableEndpoint goa.Endpoint
}

// NewClient initializes a "Subscriptions" service client given the endpoints.
func NewClient(get, addTable, stopTable goa.Endpoint) *Client {
	return &Client{
		GetEndpoint:       get,
		AddTableEndpoint:  addTable,
		StopTableEndpoint: stopTable,
	}
}

// Get calls the "Get" endpoint of the "Subscriptions" service.
func (c *Client) Get(ctx context.Context) (res *Subscription, err error) {
	var ires interface{}
	ires, err = c.GetEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*Subscription), nil
}

// AddTable calls the "AddTable" endpoint of the "Subscriptions" service.
func (c *Client) AddTable(ctx context.Context, p *SubscriptionPublishedTable) (res *Subscription, err error) {
	var ires interface{}
	ires, err = c.AddTableEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Subscription), nil
}

// StopTable calls the "StopTable" endpoint of the "Subscriptions" service.
func (c *Client) StopTable(ctx context.Context, p *SubscriptionPublishedTable) (res *Subscription, err error) {
	var ires interface{}
	ires, err = c.StopTableEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Subscription), nil
}
