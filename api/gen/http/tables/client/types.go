// Code generated by goa v3.5.4, DO NOT EDIT.
//
// Tables HTTP client types
//
// Command:
// $ goa gen github.com/lawrencejones/pgsink/api/design -o api

package client

import (
	tables "github.com/lawrencejones/pgsink/api/gen/tables"
	goa "goa.design/goa/v3/pkg"
)

// ListResponseBody is the type of the "Tables" service "List" endpoint HTTP
// response body.
type ListResponseBody []*TableResponse

// TableResponse is used to define fields on response body types.
type TableResponse struct {
	// Postgres table schema
	Schema *string `form:"schema,omitempty" json:"schema,omitempty" xml:"schema,omitempty"`
	// Postgres table name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Table row estimate, using pg_stats
	ApproximateRowCount *int64 `form:"approximate_row_count,omitempty" json:"approximate_row_count,omitempty" xml:"approximate_row_count,omitempty"`
	// Status of the publication, set to active when table is streaming
	PublicationStatus *string `form:"publication_status,omitempty" json:"publication_status,omitempty" xml:"publication_status,omitempty"`
	// Status of table imports
	ImportStatus *string `form:"import_status,omitempty" json:"import_status,omitempty" xml:"import_status,omitempty"`
	// Last active import rows processed total
	ImportRowsProcessedTotal *int64 `form:"import_rows_processed_total,omitempty" json:"import_rows_processed_total,omitempty" xml:"import_rows_processed_total,omitempty"`
}

// NewListTableOK builds a "Tables" service "List" endpoint result from a HTTP
// "OK" response.
func NewListTableOK(body []*TableResponse) []*tables.Table {
	v := make([]*tables.Table, len(body))
	for i, val := range body {
		v[i] = unmarshalTableResponseToTablesTable(val)
	}

	return v
}

// ValidateTableResponse runs the validations defined on TableResponse
func ValidateTableResponse(body *TableResponse) (err error) {
	if body.Schema == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("schema", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ApproximateRowCount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("approximate_row_count", "body"))
	}
	if body.PublicationStatus == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("publication_status", "body"))
	}
	if body.ImportStatus == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("import_status", "body"))
	}
	if body.ImportRowsProcessedTotal == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("import_rows_processed_total", "body"))
	}
	if body.PublicationStatus != nil {
		if !(*body.PublicationStatus == "inactive" || *body.PublicationStatus == "active") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.publication_status", *body.PublicationStatus, []interface{}{"inactive", "active"}))
		}
	}
	if body.ImportStatus != nil {
		if !(*body.ImportStatus == "inactive" || *body.ImportStatus == "scheduled" || *body.ImportStatus == "in_progress" || *body.ImportStatus == "error" || *body.ImportStatus == "complete" || *body.ImportStatus == "expired" || *body.ImportStatus == "unknown") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.import_status", *body.ImportStatus, []interface{}{"inactive", "scheduled", "in_progress", "error", "complete", "expired", "unknown"}))
		}
	}
	return
}
