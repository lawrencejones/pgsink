// Code generated by goa v3.5.4, DO NOT EDIT.
//
// Tables HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/lawrencejones/pgsink/api/design -o api

package server

import (
	"context"
	"net/http"

	tables "github.com/lawrencejones/pgsink/api/gen/tables"
	goahttp "goa.design/goa/v3/http"
)

// EncodeListResponse returns an encoder for responses returned by the Tables
// List endpoint.
func EncodeListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.([]*tables.Table)
		enc := encoder(ctx, w)
		body := NewListResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListRequest returns a decoder for requests sent to the Tables List
// endpoint.
func DecodeListRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			schema string
		)
		schemaRaw := r.URL.Query().Get("schema")
		if schemaRaw != "" {
			schema = schemaRaw
		} else {
			schema = "public"
		}
		payload := NewListPayload(schema)

		return payload, nil
	}
}

// marshalTablesTableToTableResponse builds a value of type *TableResponse from
// a value of type *tables.Table.
func marshalTablesTableToTableResponse(v *tables.Table) *TableResponse {
	res := &TableResponse{
		Schema:                   v.Schema,
		Name:                     v.Name,
		ApproximateRowCount:      v.ApproximateRowCount,
		PublicationStatus:        v.PublicationStatus,
		ImportStatus:             v.ImportStatus,
		ImportRowsProcessedTotal: v.ImportRowsProcessedTotal,
	}

	return res
}
