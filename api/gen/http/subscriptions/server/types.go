// Code generated by goa v3.5.4, DO NOT EDIT.
//
// Subscriptions HTTP server types
//
// Command:
// $ goa gen github.com/lawrencejones/pgsink/api/design -o api

package server

import (
	subscriptions "github.com/lawrencejones/pgsink/api/gen/subscriptions"
	goa "goa.design/goa/v3/pkg"
)

// AddTableRequestBody is the type of the "Subscriptions" service "AddTable"
// endpoint HTTP request body.
type AddTableRequestBody struct {
	// Postgres table schema
	Schema *string `form:"schema,omitempty" json:"schema,omitempty" xml:"schema,omitempty"`
	// Postgres table name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// StopTableRequestBody is the type of the "Subscriptions" service "StopTable"
// endpoint HTTP request body.
type StopTableRequestBody struct {
	// Postgres table schema
	Schema *string `form:"schema,omitempty" json:"schema,omitempty" xml:"schema,omitempty"`
	// Postgres table name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// GetResponseBody is the type of the "Subscriptions" service "Get" endpoint
// HTTP response body.
type GetResponseBody struct {
	// ID of subscription
	ID string `form:"id" json:"id" xml:"id"`
	// List of published tables
	PublishedTables []*SubscriptionPublishedTableResponseBody `form:"published_tables" json:"published_tables" xml:"published_tables"`
}

// AddTableResponseBody is the type of the "Subscriptions" service "AddTable"
// endpoint HTTP response body.
type AddTableResponseBody struct {
	// ID of subscription
	ID string `form:"id" json:"id" xml:"id"`
	// List of published tables
	PublishedTables []*SubscriptionPublishedTableResponseBody `form:"published_tables" json:"published_tables" xml:"published_tables"`
}

// StopTableResponseBody is the type of the "Subscriptions" service "StopTable"
// endpoint HTTP response body.
type StopTableResponseBody struct {
	// ID of subscription
	ID string `form:"id" json:"id" xml:"id"`
	// List of published tables
	PublishedTables []*SubscriptionPublishedTableResponseBody `form:"published_tables" json:"published_tables" xml:"published_tables"`
}

// SubscriptionPublishedTableResponseBody is used to define fields on response
// body types.
type SubscriptionPublishedTableResponseBody struct {
	// Postgres table schema
	Schema string `form:"schema" json:"schema" xml:"schema"`
	// Postgres table name
	Name string `form:"name" json:"name" xml:"name"`
}

// NewGetResponseBody builds the HTTP response body from the result of the
// "Get" endpoint of the "Subscriptions" service.
func NewGetResponseBody(res *subscriptions.Subscription) *GetResponseBody {
	body := &GetResponseBody{
		ID: res.ID,
	}
	if res.PublishedTables != nil {
		body.PublishedTables = make([]*SubscriptionPublishedTableResponseBody, len(res.PublishedTables))
		for i, val := range res.PublishedTables {
			body.PublishedTables[i] = marshalSubscriptionsSubscriptionPublishedTableToSubscriptionPublishedTableResponseBody(val)
		}
	}
	return body
}

// NewAddTableResponseBody builds the HTTP response body from the result of the
// "AddTable" endpoint of the "Subscriptions" service.
func NewAddTableResponseBody(res *subscriptions.Subscription) *AddTableResponseBody {
	body := &AddTableResponseBody{
		ID: res.ID,
	}
	if res.PublishedTables != nil {
		body.PublishedTables = make([]*SubscriptionPublishedTableResponseBody, len(res.PublishedTables))
		for i, val := range res.PublishedTables {
			body.PublishedTables[i] = marshalSubscriptionsSubscriptionPublishedTableToSubscriptionPublishedTableResponseBody(val)
		}
	}
	return body
}

// NewStopTableResponseBody builds the HTTP response body from the result of
// the "StopTable" endpoint of the "Subscriptions" service.
func NewStopTableResponseBody(res *subscriptions.Subscription) *StopTableResponseBody {
	body := &StopTableResponseBody{
		ID: res.ID,
	}
	if res.PublishedTables != nil {
		body.PublishedTables = make([]*SubscriptionPublishedTableResponseBody, len(res.PublishedTables))
		for i, val := range res.PublishedTables {
			body.PublishedTables[i] = marshalSubscriptionsSubscriptionPublishedTableToSubscriptionPublishedTableResponseBody(val)
		}
	}
	return body
}

// NewAddTableSubscriptionPublishedTable builds a Subscriptions service
// AddTable endpoint payload.
func NewAddTableSubscriptionPublishedTable(body *AddTableRequestBody) *subscriptions.SubscriptionPublishedTable {
	v := &subscriptions.SubscriptionPublishedTable{
		Schema: *body.Schema,
		Name:   *body.Name,
	}

	return v
}

// NewStopTableSubscriptionPublishedTable builds a Subscriptions service
// StopTable endpoint payload.
func NewStopTableSubscriptionPublishedTable(body *StopTableRequestBody) *subscriptions.SubscriptionPublishedTable {
	v := &subscriptions.SubscriptionPublishedTable{
		Schema: *body.Schema,
		Name:   *body.Name,
	}

	return v
}

// ValidateAddTableRequestBody runs the validations defined on
// AddTableRequestBody
func ValidateAddTableRequestBody(body *AddTableRequestBody) (err error) {
	if body.Schema == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("schema", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateStopTableRequestBody runs the validations defined on
// StopTableRequestBody
func ValidateStopTableRequestBody(body *StopTableRequestBody) (err error) {
	if body.Schema == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("schema", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}
