// Code generated by goa v3.5.4, DO NOT EDIT.
//
// Subscriptions HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/lawrencejones/pgsink/api/design -o api

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	subscriptions "github.com/lawrencejones/pgsink/api/gen/subscriptions"
	goahttp "goa.design/goa/v3/http"
)

// BuildGetRequest instantiates a HTTP request object with method and path set
// to call the "Subscriptions" service "Get" endpoint
func (c *Client) BuildGetRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetSubscriptionsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Subscriptions", "Get", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetResponse returns a decoder for responses returned by the
// Subscriptions Get endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeGetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body GetResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Subscriptions", "Get", err)
			}
			err = ValidateGetResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Subscriptions", "Get", err)
			}
			res := NewGetSubscriptionCreated(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Subscriptions", "Get", resp.StatusCode, string(body))
		}
	}
}

// BuildAddTableRequest instantiates a HTTP request object with method and path
// set to call the "Subscriptions" service "AddTable" endpoint
func (c *Client) BuildAddTableRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddTableSubscriptionsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Subscriptions", "AddTable", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAddTableRequest returns an encoder for requests sent to the
// Subscriptions AddTable server.
func EncodeAddTableRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*subscriptions.SubscriptionPublishedTable)
		if !ok {
			return goahttp.ErrInvalidType("Subscriptions", "AddTable", "*subscriptions.SubscriptionPublishedTable", v)
		}
		body := NewAddTableRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("Subscriptions", "AddTable", err)
		}
		return nil
	}
}

// DecodeAddTableResponse returns a decoder for responses returned by the
// Subscriptions AddTable endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeAddTableResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body AddTableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Subscriptions", "AddTable", err)
			}
			err = ValidateAddTableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Subscriptions", "AddTable", err)
			}
			res := NewAddTableSubscriptionCreated(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Subscriptions", "AddTable", resp.StatusCode, string(body))
		}
	}
}

// BuildStopTableRequest instantiates a HTTP request object with method and
// path set to call the "Subscriptions" service "StopTable" endpoint
func (c *Client) BuildStopTableRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: StopTableSubscriptionsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Subscriptions", "StopTable", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeStopTableRequest returns an encoder for requests sent to the
// Subscriptions StopTable server.
func EncodeStopTableRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*subscriptions.SubscriptionPublishedTable)
		if !ok {
			return goahttp.ErrInvalidType("Subscriptions", "StopTable", "*subscriptions.SubscriptionPublishedTable", v)
		}
		body := NewStopTableRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("Subscriptions", "StopTable", err)
		}
		return nil
	}
}

// DecodeStopTableResponse returns a decoder for responses returned by the
// Subscriptions StopTable endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeStopTableResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusAccepted:
			var (
				body StopTableResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Subscriptions", "StopTable", err)
			}
			err = ValidateStopTableResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Subscriptions", "StopTable", err)
			}
			res := NewStopTableSubscriptionAccepted(&body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Subscriptions", "StopTable", resp.StatusCode, string(body))
		}
	}
}

// unmarshalSubscriptionPublishedTableResponseBodyToSubscriptionsSubscriptionPublishedTable
// builds a value of type *subscriptions.SubscriptionPublishedTable from a
// value of type *SubscriptionPublishedTableResponseBody.
func unmarshalSubscriptionPublishedTableResponseBodyToSubscriptionsSubscriptionPublishedTable(v *SubscriptionPublishedTableResponseBody) *subscriptions.SubscriptionPublishedTable {
	res := &subscriptions.SubscriptionPublishedTable{
		Schema: *v.Schema,
		Name:   *v.Name,
	}

	return res
}
