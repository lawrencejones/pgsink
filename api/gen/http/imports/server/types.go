// Code generated by goa v3.5.4, DO NOT EDIT.
//
// Imports HTTP server types
//
// Command:
// $ goa gen github.com/lawrencejones/pgsink/api/design -o api

package server

import (
	imports "github.com/lawrencejones/pgsink/api/gen/imports"
)

// ListResponseBody is the type of the "Imports" service "List" endpoint HTTP
// response body.
type ListResponseBody []*ImportResponse

// ImportResponse is used to define fields on response body types.
type ImportResponse struct {
	// Unique ID for the import
	ID int `form:"id" json:"id" xml:"id"`
	// Subscription ID, associating this import to a specific subscription
	SubscriptionID string `form:"subscription_id" json:"subscription_id" xml:"subscription_id"`
	// Postgres table schema
	Schema string `form:"schema" json:"schema" xml:"schema"`
	// Postgres table name
	TableName string `form:"table_name" json:"table_name" xml:"table_name"`
	// Import was completed at this time
	CompletedAt *string `form:"completed_at,omitempty" json:"completed_at,omitempty" xml:"completed_at,omitempty"`
	// Import was created at this time
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// Import was last updated at this time
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
	// Import was expired at this time
	ExpiredAt *string `form:"expired_at,omitempty" json:"expired_at,omitempty" xml:"expired_at,omitempty"`
	// Last import error
	Error *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// Count of error attempts
	ErrorCount int `form:"error_count" json:"error_count" xml:"error_count"`
	// Timestamp of last error, only reset on error
	LastErrorAt *string `form:"last_error_at,omitempty" json:"last_error_at,omitempty" xml:"last_error_at,omitempty"`
	// Count of rows processed
	RowsProcessedTotal int64 `form:"rows_processed_total" json:"rows_processed_total" xml:"rows_processed_total"`
}

// NewListResponseBody builds the HTTP response body from the result of the
// "List" endpoint of the "Imports" service.
func NewListResponseBody(res []*imports.Import) ListResponseBody {
	body := make([]*ImportResponse, len(res))
	for i, val := range res {
		body[i] = marshalImportsImportToImportResponse(val)
	}
	return body
}
