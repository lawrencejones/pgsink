// Code generated by goa v3.5.4, DO NOT EDIT.
//
// Imports HTTP client types
//
// Command:
// $ goa gen github.com/lawrencejones/pgsink/api/design -o api

package client

import (
	imports "github.com/lawrencejones/pgsink/api/gen/imports"
	goa "goa.design/goa/v3/pkg"
)

// ListResponseBody is the type of the "Imports" service "List" endpoint HTTP
// response body.
type ListResponseBody []*ImportResponse

// ImportResponse is used to define fields on response body types.
type ImportResponse struct {
	// Unique ID for the import
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Subscription ID, associating this import to a specific subscription
	SubscriptionID *string `form:"subscription_id,omitempty" json:"subscription_id,omitempty" xml:"subscription_id,omitempty"`
	// Postgres table schema
	Schema *string `form:"schema,omitempty" json:"schema,omitempty" xml:"schema,omitempty"`
	// Postgres table name
	TableName *string `form:"table_name,omitempty" json:"table_name,omitempty" xml:"table_name,omitempty"`
	// Import was completed at this time
	CompletedAt *string `form:"completed_at,omitempty" json:"completed_at,omitempty" xml:"completed_at,omitempty"`
	// Import was created at this time
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// Import was last updated at this time
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// Import was expired at this time
	ExpiredAt *string `form:"expired_at,omitempty" json:"expired_at,omitempty" xml:"expired_at,omitempty"`
	// Last import error
	Error *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// Count of error attempts
	ErrorCount *int `form:"error_count,omitempty" json:"error_count,omitempty" xml:"error_count,omitempty"`
	// Timestamp of last error, only reset on error
	LastErrorAt *string `form:"last_error_at,omitempty" json:"last_error_at,omitempty" xml:"last_error_at,omitempty"`
	// Count of rows processed
	RowsProcessedTotal *int64 `form:"rows_processed_total,omitempty" json:"rows_processed_total,omitempty" xml:"rows_processed_total,omitempty"`
}

// NewListImportOK builds a "Imports" service "List" endpoint result from a
// HTTP "OK" response.
func NewListImportOK(body []*ImportResponse) []*imports.Import {
	v := make([]*imports.Import, len(body))
	for i, val := range body {
		v[i] = unmarshalImportResponseToImportsImport(val)
	}

	return v
}

// ValidateImportResponse runs the validations defined on ImportResponse
func ValidateImportResponse(body *ImportResponse) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.SubscriptionID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("subscription_id", "body"))
	}
	if body.Schema == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("schema", "body"))
	}
	if body.TableName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("table_name", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	if body.ErrorCount == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error_count", "body"))
	}
	if body.RowsProcessedTotal == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("rows_processed_total", "body"))
	}
	if body.SubscriptionID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.subscription_id", *body.SubscriptionID, goa.FormatUUID))
	}
	if body.CompletedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.completed_at", *body.CompletedAt, goa.FormatDateTime))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	if body.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.updated_at", *body.UpdatedAt, goa.FormatDateTime))
	}
	if body.ExpiredAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.expired_at", *body.ExpiredAt, goa.FormatDateTime))
	}
	if body.LastErrorAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.last_error_at", *body.LastErrorAt, goa.FormatDateTime))
	}
	return
}
