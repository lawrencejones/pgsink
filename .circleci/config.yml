---
version: 2

references:
  # Consistent Golang build and test environment
  docker_golang: &docker_golang
    image: golang:1.17.6
    environment:
      PGHOST: "127.0.0.1"
      PGUSER: "pgsink_test"
      PGDATABASE: "pgsink_test"

  # Postgres docker image to run integration tests against. Enable replication
  # and turn off fsync for speed- authentication is trust by default.
  docker_postgres: &docker_postgres
    image: postgres:13.1
    command: |
      docker-entrypoint.sh postgres -c 'wal_level=logical' -c 'fsync=off'
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: ""
      POSTGRES_HOST_AUTH_METHOD: "trust"

  # Consistent Javascript build and test environment
  docker_javascript: &docker_javascript
    image: node:14.15
    environment:
      # This doesn't seem that reliably, so also cache the version-distro
      # specific cache dir.
      YARN_CACHE_FOLDER: ~/.cache/yarn

  # Javascript dependency steps, to speed JS builds.
  #
  # steps:
  #   - restore_cache: *docker_javascript_dep_restore
  #   - run: *docker_javascript_dep_install
  #   - save_cache: *docker_javascript_dep_save
  docker_javascript_dep_steps: &docker_javascript_dep_steps
    - restore_cache: &docker_javascript_dep_restore
        name: Restore Yarn Package Cache
        keys:
          - yarn-packages-{{ checksum "web/yarn.lock" }}-v2
    - run: &docker_javascript_dep_install
        name: Install Dependencies
        command: yarn install --immutable
        working_directory: web
    - save_cache: &docker_javascript_dep_save
        name: Save Yarn Package Cache
        key: yarn-packages-{{ checksum "web/yarn.lock" }}-v2
        paths:
          - ~/.cache/yarn
          - /usr/local/share/.cache/yarn/v6

jobs:
  unit-integration:
    docker:
      - *docker_golang
      - *docker_postgres
    working_directory: /app
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: go get ./...
      - run:
          name: Install ginkgo test runner (using go.mod)
          command: go install github.com/onsi/ginkgo/ginkgo
      - run:
          name: Install Postgres
          command: apt-get update && apt-get install -y postgresql-client libpq-dev
      - run:
          name: Create test database
          command: make recreatedb migrate-run PSQL=$(which psql)
      - run:
          name: Run unit tests
          command: make test-unit
      - run:
          name: Run integration tests
          command: make test-integration

  web-lint:
    docker:
      - *docker_javascript
    working_directory: /app
    steps:
      - checkout
      - restore_cache: *docker_javascript_dep_restore
      - run: *docker_javascript_dep_install
      - save_cache: *docker_javascript_dep_save
      - run: 'cd web && yarn lint'
      - run: 'cd web && yarn pretty'

  web-build:
    docker:
      - *docker_javascript
    working_directory: /app
    steps:
      - checkout
      - restore_cache: *docker_javascript_dep_restore
      - run: *docker_javascript_dep_install
      - save_cache: *docker_javascript_dep_save
      - run: 'cd web && yarn build'
      - store_artifacts:
          path: web/build
      # Provide the build assets for later pipeline steps
      - persist_to_workspace:
          root: .
          paths:
            - web/build

  check-deps-updated:
    docker:
      - *docker_golang
    working_directory: /app
    steps:
      - checkout
      - run: go mod download
      - run: env GOPROXY=off go build -mod=readonly ./...

  check-deps-tidy:
    docker:
      - *docker_golang
    working_directory: /app
    steps:
      - checkout
      - run: go mod tidy
      - run: |
          if ! git diff --exit-code -- go.mod go.sum; then
            echo "Modules not tidy; please run 'go mod tidy'";
          fi;

  check-generated-code:
    docker:
      - *docker_golang
    working_directory: /app
    steps:
      - checkout
      - run: go install golang.org/x/tools/cmd/goimports
      - run: make generate
      - run: |
          if ! git diff --exit-code --name-only; then
            echo "Generated code not up to date; please run 'make generate'"
            exit 1
          fi

  check-api-gen:
    docker:
      - *docker_golang
    working_directory: /app
    steps:
      - checkout
      - run: go install goa.design/goa/v3/cmd/goa
      - run: make api/gen
      - run: |
          if ! git diff --exit-code --name-only; then
            echo "api/gen not up-to-date; please run 'make api/gen'"
            exit 1
          fi

  release:
    docker:
      - *docker_golang
    working_directory: /app
    steps:
      - checkout
      # Attach web assets back into web/build
      - attach_workspace:
          at: .
      - run:
          name: Release
          command: |
            CURRENT_VERSION="v$(cat VERSION)"
            if [[ $(git tag -l "${CURRENT_VERSION}") == "${CURRENT_VERSION}" ]]; then
              echo "Version ${CURRENT_VERSION} is already released"
              exit 0
            fi
            curl -L -o /tmp/goreleaser_Linux_x86_64.tar.gz https://github.com/goreleaser/goreleaser/releases/download/v0.150.0/goreleaser_Linux_x86_64.tar.gz
            tar zxf /tmp/goreleaser_Linux_x86_64.tar.gz -C /tmp
            git tag "${CURRENT_VERSION}"
            git push --tags
            /tmp/goreleaser --rm-dist

workflows:
  version: 2
  build-integration:
    jobs:
      - unit-integration
      - web-lint
      - web-build
      - check-deps-updated
      - check-deps-tidy
      - check-generated-code
      - check-api-gen
      - release:
          requires:
            - unit-integration
            - web-build
          filters:
            branches: {only: master}
